[build-system]
requires = ["pdm-backend", ]
build-backend = "pdm.backend"

[project]
name = "accustom"
description = "Accustom is a library for responding to Custom Resources in AWS CloudFormation using the decorator pattern."
authors = [
    { name = "Taylor Bertie", email = "bertiet@amazon.com" },
]
dependencies = [
    "boto3~=1.26",
    "botocore~=1.29",
    "requests~=2.28",
    "typing-extensions~=4.5",
]
requires-python = ">=3.9"
readme = "README.md"
keywords = [
    "cloudformation",
    "lambda",
    "custom",
    "resource",
    "decorator",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]
dynamic = ["version"]

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.4.0"
tag_format = "$version"

[project.license]
text = "Apache-2.0"

[project.urls]
Homepage = "https://github.com/awslabs/cloudformation-accustom"

[tool.pdm.build]
includes = ["src"]
package-dir = "src"

[tool.pdm.version]
source = "scm"

[tool.pdm.dev-dependencies]
test = [
    "pytest~=7.3",
    "awscli~=1.27",
]
lint = [
    "black~=23.3",
    "Flake8-pyproject~=1.2",
    "flake8~=6.0",
    "isort~=5.12",
    "pre-commit~=3.2",
    "mypy~=1.2",
    "boto3-stubs[cloudformation]~=1.28",
    "aws-lambda-typing~=2.17",
    "types-requests~=2.28",
    "pyyaml~=5.4",
]

[tool.pdm.scripts.flake8]
cmd = "flake8"
help = "Run the flake8 the code"
site_packages = true

[tool.pdm.scripts.isort]
cmd = "isort ."
help = "Run isort against the code"
site_packages = true

[tool.pdm.scripts.black]
cmd = "black ."
help = "Run black against the code"
site_packages = true

[tool.pdm.scripts.mypy]
cmd = "mypy ."
help = "Run mypy against the code"
site_packages = true

[tool.pdm.scripts._require_base]
cmd = "pdm export --format requirements --without-hashes"
help = "Base command for outputting requirements"

[tool.pdm.scripts.require]
composite = [
    "_require_base --output requirements.txt --prod",
    "_require_base --output requirements_test.txt --dev --group build",
    "_require_base --output requirements_lint.txt --dev --group lint"
]
help = "Generates requirements.txt and requirements_lint.txt for reference/manual install"

[tool.pdm.scripts.int_make]
cmd = "make --directory tests/int"
help = "Executes an arbitary make command againsts the integration tests"

[tool.pdm.scripts.lint]
cmd = "pre-commit run --all-files"
help = "Check code style against linters using pre-commit"
site_packages = true

[tool.pdm.scripts.post_lock]
composite = [
    "require",
]
help = "post_lock Hook: Generate requirements.txt and requirement_build.txt for reference/manual install"

[tool.pdm.scripts.int_test]
cmd = "pytest"
help = "Run all tests including intergration tests"
site_packages = true

[tool.pdm.scripts.pre_int_test]
composite = [
    "require",
    "pdm install --dev --group test",
    "int_make unexecute",
    "int_make execute",
]
help = "pre_test hook: Installs the packages and prepares enviroments needed to perform integration testing"

[tool.pdm.scripts.post_int_test]
composite = [
    "int_make clean",
]
help = "post_test hook: Cleans up enviroments needed to perform integration testing"

[tool.pdm.scripts.test]
cmd = "pytest --ignore='tests/int'"
help = "Run only unit testing"
site_packages = true

[tool.pdm.scripts.pre_test]
composite = [
    "require",
    "pdm install --dev --group test",
]
help = "pre_test hook: Installs the packages needed to perform unit testing"

[tool.pdm.scripts.pre_lint]
composite = [
    "pdm install --dev --group lint",
]
help = "pre_lint hook: Installs the paackages needed to perform linting"

[tool.pdm.scripts.pre_publish]
composite = [
    "lint",
    "test",
]
help = "pre_publish hook: Ensure that linting and testing is performed before publishing"

[tool.pdm.scripts.format]
composite = [
    "isort",
    "black",
]
help = "Format the code using Black and iSort"

[tool.pytest.ini_options]
addopts = "--ignore=__pypackages__"

[tool.flake8]
ignore = [
    "E123",
    "E203",
    "W503",
]
exclude = [
    "__pypackages__",
    ".venv",
]
max_line_length = 120
per-file-ignores = [
    "__init__.py:F401, F403",
]

[tool.isort]
profile = "black"
line_length = 120
multi_line_output = 3
include_trailing_comma = true
src_paths = [
    "src",
    "test",
]

[tool.black]
line-length = 120

[tool.mypy]
python_version = "3.9"
platform = "manylinux2014_x86_64"
explicit_package_bases = true
check_untyped_defs = true
warn_unused_configs = true
show_error_codes = true
color_output = true
pretty = true
mypy_path = "src"
exclude = [
    "^__pypackages__/",
    "^.venv/",
]
